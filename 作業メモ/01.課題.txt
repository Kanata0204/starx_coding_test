■シナリオ
「大規模データを取り扱うSaaS系アプリケーションの要件整理と、システムアーキテクチャの設計を行ってください。」
・ユーザー企業（複数）が自社データをアップロードし、分析結果を可視化できるBtoB向けSaaSサービスを想定
・フロントエンドはReact (TypeScript)、バックエンドはRuby on Rails、インフラはAWSを前提とする
・データ量（1社あたり数十万〜数百万行／月のCSV、またはAPI経由のデータ取り込みを想定）
・事業の成長に伴い、将来的にはデータ量・ユーザー数の増加が見込まれる

■課題の要旨
要求仕様（機能要件）と非機能要件を整理し、設計方針を提示する
・SaaSとして必要な機能(ユーザ認証、多テナント管理、データアップロード＆可視化等)
非機能要件(性能、可用性、セキュリティ、スケーラビリティ、運用・監視など)をどう捉えるか
・プロダクトのライフサイクルを踏まえて、どこまでをMVP(最小実装)とし、将来的にどう拡張していくか

■アーキテクチャ設計
・フロントエンド(React x TypeScript)とバックエンド(Ruby on Rails)の分離 or SSRの利用方針
・データベース設計の基本方針（RDBとしてのスキーマ設計、将来的な分割・拡張の考え方、AWS RDSの活用など）
・大規模データ処理時のアプローチ（バックグラウンドジョブ、分散処理、サーバレス活用 etc.）
・AWS上でのサービス構成案 (ECS / EKS / Lambda / S3 / CloudFront / VPC設計 などの概略)

■テスト戦略・品質保証
・コードレベルのテスト戦略（ユニットテスト / E2E / 自動テストの優先度付け）
・運用フェーズでのモニタリング・障害対応（APM, ログ監視, Metrics 等）
・デプロイパイプライン（CI/CD）の概要

■セキュリティ設計
・マルチテナントにおけるデータ分離、認可・認証の仕組み
・API / フロントエンド間の通信方式、HTTPSやJWT等の導入
・監査ログやアプリケーションログの取り扱い

■運用・保守に関する考慮
・インフラのスケーリング戦略（オンデマンドスケーリング、リザーブドインスタンス活用など）
・データバックアップ・リカバリ計画（RDSスナップショット、S3への定期バックアップなど）
・リリースフローやインシデント対応フロー

■リスクとその対策
・技術的リスク、組織的リスク、運用リスク、レギュレーション面など
・具体的な回避策・緩和策

■具体的な提出物
本課題では、実装そのものは最低限またはAI活用OKとし、要件定義や非機能要件を中心にまとめた設計ドキュメントをメインの成果物とします。
※すべてを提出する必要はありません。
  ■設計ドキュメント(PDF / Markdown / Google Docs 等 形式問わず、最小限で構いません)
    ・機能要件と非機能要件の一覧
    ・システム全体のアーキテクチャ図（AWSサービス構成含む）
    ・データモデル概略図（ER 図など）
    ・フロントエンドとバックエンドの連携方法やAPI仕様の概略
    ・テスト戦略、セキュリティ要件、運用保守戦略
    ・今後の拡張性を含めた検討事項／優先順位
  ■サンプルコード (最小限でOK)
    下記いずれか、または複数
    ・Railsのプロジェクトテンプレート（Gemfile, Dockerfile などの雛形＋コメントで実装方針を示す）
    ・React(TypeScript)のプロジェクトテンプレート（package.json, tsconfig などの雛形＋コメント）
    ・AWS CDK/Terraform などインフラ構成管理ツールのサンプル
※コード量よりも、「ディレクトリ構成や設定の意図をきちんとコメントやREADMEに書く」点を重視
  ■その他ドキュメント
    ・提出物のセットアップ手順（もしローカルで動く最小限のコードがある場合）
    ・使っている主要ライブラリ／AWSサービスの説明
    ・設計上のこだわりポイントや、今回の想定で妥協した点（MVPとの境界）
